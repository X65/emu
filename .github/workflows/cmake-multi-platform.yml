# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: CMake on multiple platforms

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following 4 configurations:
      # 1. <Windows, Release, mingw compiler toolchain on the default runner image, Ninja generator>
      # 2. <Linux, Release, latest GCC compiler toolchain on the default runner image, Ninja generator>
      # 3. <Linux, Release, latest Clang compiler toolchain on the default runner image, Ninja generator>
      # 4. <Linux, Release, latest Clang compiler toolchain on the ARM runner image, Ninja generator>
      #
      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:
        os: [ubuntu-latest, windows-latest, ubuntu-24.04-arm]
        build_type: [Release]
        c_compiler: [gcc, clang]
        include:
          - bin: emu
          - os: windows-latest
            c_compiler: gcc
            cpp_compiler: g++
            bin: emu.exe
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
          - os: ubuntu-24.04-arm
            c_compiler: clang
            cpp_compiler: clang++
        exclude:
          - os: windows-latest
            c_compiler: clang
          - os: ubuntu-24.04-arm
            c_compiler: gcc

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 1

      - name: Set reusable strings
        # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
        id: strings
        shell: bash
        run: |
          echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"
          echo "os=${RUNNER_OS@L}" >> "$GITHUB_OUTPUT"
          echo "arch=${RUNNER_ARCH@L}" >> "$GITHUB_OUTPUT"

      - name: Install dependencies
        uses: ConorMacBride/install-package@v1
        with:
          apt: libx11-dev libxcursor-dev libxi-dev libasound2-dev libegl1-mesa-dev ninja-build clang
          choco: mingw ninja

      - name: Configure CMake
        # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
        # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
        run: >
          cmake -G Ninja -B ${{ steps.strings.outputs.build-output-dir }}
          -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
          -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
          -S ${{ github.workspace }}

      - name: Build
        # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
        run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

      - name: Test
        working-directory: ${{ steps.strings.outputs.build-output-dir }}
        # Execute tests defined by the CMake configuration. Note that --build-config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
        # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
        run: ctest --build-config ${{ matrix.build_type }}

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: emu_${{ steps.strings.outputs.os }}_${{ steps.strings.outputs.arch }}_${{ matrix.c_compiler }}
          path: ${{ steps.strings.outputs.build-output-dir }}/${{ matrix.bin }}
          if-no-files-found: error

  release:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 1
      - name: Update latest tag
        uses: EndBug/latest-tag@latest
      - name: Retrieve Artifacts
        uses: actions/download-artifact@v4
      - name: Rename Artifacts
        run: |
          mv emu_linux_arm64_clang/emu emu_linux_arm64
          mv emu_linux_x64_clang/emu emu_linux_x64
          mv emu_windows_x64_gcc/emu.exe emu_windows_x64.exe
      - name: Release
        uses: softprops/action-gh-release@v2
        with:
          prerelease: true
          name: Development Build
          tag_name: latest
          generate_release_notes: true
          files: |
            emu_*_*
            LICENSE
          preserve_order: true
          fail_on_unmatched_files: true
